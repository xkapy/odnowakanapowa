import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { LuFileText, LuMailOpen, LuMessagesSquare, LuCopy } from "react-icons/lu";
import { Link } from "react-router-dom";

const Contact = () => {
  const [errors, setErrors] = useState<{ email?: string; phone?: string; general?: string }>({});
  const [popupMessage, setPopupMessage] = useState<string>("");
  const [copied, setCopied] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    message: ''
  });

  // Check if user is logged in and fetch their data
  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      setIsLoggedIn(true);
      fetchUserData(token);
    }
  }, []);

  const fetchUserData = async (token: string) => {
    try {
      const response = await fetch("http://localhost:3001/api/contact/user-data", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        setFormData(prev => ({
          ...prev,
          firstName: data.firstName,
          lastName: data.lastName,
          email: data.email,
          phone: data.phone || ''
        }));
      }
    } catch (error) {
      console.error("Error fetching user data:", error);
    }
  };

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    let validationErrors: typeof errors = {};

    if (!formData.firstName?.trim() || !formData.lastName?.trim() || !formData.email?.trim() || !formData.message?.trim()) {
      setErrors({ general: "Wypełnij wszystkie pola oprócz telefonu." });
      return;
    }

    if (!/^\S+@\S+\.\S+$/.test(formData.email)) {
      validationErrors.email = "Wprowadź poprawny adres e-mail.";
      setErrors(validationErrors);
      return;
    }

    if (formData.phone?.trim()) {
      if (!/^(?:\+\d{1,3} \d{9}|\+\d{1,3}\s?\d{3}\s?\d{3}\s?\d{3}|\+\d{1,3} \d{3} \d{3} \d{3}|\d{9}|\d{3} \d{3} \d{3})$/.test(formData.phone.trim())) {
        validationErrors.phone = "Wprowadź poprawny numer telefonu.";
      }
    }

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    setErrors({});

    try {
      const response = await fetch("http://localhost:3001/api/contact", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          firstName: formData.firstName,
          lastName: formData.lastName,
          email: formData.email,
          phone: formData.phone || null,
          message: formData.message
        }),
      });

      const result = await response.json();

      if (response.ok) {
        setPopupMessage("Wiadomość została wysłana!");
        setFormData(prev => ({ ...prev, message: '' })); // Clear only message
        setTimeout(() => setPopupMessage(""), 3000);
      } else {
        setPopupMessage(result.error || "Wystąpił błąd podczas wysyłania formularza. Spróbuj ponownie.");
        setTimeout(() => setPopupMessage(""), 3000);
      }
    } catch (error) {
      setPopupMessage("Wystąpił błąd. Spróbuj ponownie później.");
      setTimeout(() => setPopupMessage(""), 3000);
    }
  };

  const handleCopy = () => {
    navigator.clipboard
      .writeText("odnowakanapowa@gmail.com")
      .then(() => {
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
      })
      .catch((err) => console.error("Błąd kopiowania:", err));
  };

  return (
    <div className="max-w-6xl px-4 min-h-screen sm:px-6 lg:px-8 lg:py-14 mx-auto">
      <div className="max-w-2xl lg:max-w-5xl mx-auto pt-30 not-lg:pt-40 not-lg:pb-30">
        <div className="flex flex-col gap-2 text-center">
          <h1 className="text-3xl font-bold text-gray-800 sm:text-4xl">Skontaktuj się z nami</h1>
          <p className="mt-1 text-gray-500 text-md">Chętnie porozmawiamy o tym, jak możemy Ci pomóc.</p>
        </div>

        <div className="mt-12 grid items-center lg:grid-cols-2 gap-6 lg:gap-16">
          <div className="flex flex-col border border-gray-200 rounded-xl p-4 sm:p-6 lg:p-8">
            <h2 className="mb-8 text-xl font-semibold text-gray-800">Dane kontaktowe</h2>

            <form onSubmit={handleSubmit}>
              <div className="grid gap-4">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="firstName" className="sr-only">
                      Imię
                    </label>
                    <input
                      type="text"
                      name="firstName"
                      id="firstName"
                      value={formData.firstName}
                      onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}
                      className="py-3 px-4 block w-full border-gray-300 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none"
                      disabled={isLoggedIn}
                    />
                  </div>

                  <div>
                    <label htmlFor="lastName" className="sr-only">
                      Nazwisko
                    </label>
                    <input
                      type="text"
                      name="lastName"
                      id="lastName"
                      value={formData.lastName}
                      onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}
                      className="py-3 px-4 block w-full border-gray-300 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none"
                      placeholder="Nazwisko"
                      disabled={isLoggedIn}
                    />
                  </div>
                </div>

                <div>
                  <label htmlFor="email" className="sr-only">
                    Email
                  </label>
                  <input
                    type="email"
                    name="email"
                    id="email"
                    value={formData.email}
                    onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                    className="py-3 px-4 block w-full border-gray-300 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none"
                    placeholder="Email"
                    disabled={isLoggedIn}
                  />
                  {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email}</p>}
                </div>

                <div>
                  <label htmlFor="phone" className="sr-only">
                    Telefon
                  </label>
                  <input
                    type="tel"
                    name="phone"
                    id="phone"
                    value={formData.phone}
                    onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
                    className="py-3 px-4 block w-full border-gray-300 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none"
                    placeholder="Telefon (opcjonalnie)"
                    disabled={isLoggedIn}
                  />
                  {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone}</p>}
                </div>

                <div>
                  <label htmlFor="message" className="sr-only">
                    Wiadomość
                  </label>
                  <textarea
                    id="message"
                    name="message"
                    value={formData.message}
                    onChange={(e) => setFormData(prev => ({ ...prev, message: e.target.value }))}
                    rows={4}
                    className="py-3 px-4 block w-full border-gray-300 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none"
                    placeholder="Wiadomość"
                  ></textarea>
              {errors.general && <p className="text-red-500 text-sm mt-2">{errors.general}</p>}

              <div className="mt-4 grid">
                <button
                  type="submit"
                  className="w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none"
                >
                  Wyślij wiadomość
                </button>
              </div>

              <div className="mt-3 text-center">
                <p className="text-sm text-gray-500">
                  Odpowiemy najszybciej jak to możliwe.
                </p>
              </div>
            </form>
          </div>

          <div className="divide-y divide-gray-200">
            <div className="flex gap-x-7 py-6">
              <LuMessagesSquare className="flex-shrink-0 size-6 mt-1.5 text-gray-800" />
              <div className="grow">
                <h3 className="font-semibold text-gray-800">FAQ</h3>
                <p className="mt-1 text-sm text-gray-500">
                  Sprawdź nasze najczęstsze pytania.
                </p>
                <Link
                  to="/faq"
                  className="mt-2 inline-flex items-center gap-x-2 text-sm font-medium text-gray-600 hover:text-gray-800"
                >
                  Zobacz FAQ
                  <LuFileText className="flex-shrink-0 size-2.5 transition ease-in-out group-hover:translate-x-1" />
                </Link>
              </div>
            </div>

            <div className="flex gap-x-7 py-6">
              <LuMailOpen className="flex-shrink-0 size-6 mt-1.5 text-gray-800" />
              <div className="grow">
                <h3 className="font-semibold text-gray-800">Kontakt mailowy</h3>
                <p className="mt-1 text-sm text-gray-500">
                  Preferujesz pisanie maili?
                </p>
                <div className="mt-2 inline-flex items-center gap-x-2 text-sm font-medium text-gray-600 hover:text-gray-800">
                  <span>odnowakanapowa@gmail.com</span>
                  <LuCopy size={14} style={{ cursor: "pointer", color: "#4a5565", strokeWidth: "2.5px" }} onClick={handleCopy} />
                </div>
                <AnimatePresence>
                  {copied && (
                    <motion.div
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.2 }}
                      className="mt-1 text-xs text-green-600"
                    >
                      Skopiowano!
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            </div>
          </div>
        </div>
      </div>

      <AnimatePresence>
        {popupMessage && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50"
          >
            <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full text-center">
              <p className="text-gray-800">{popupMessage}</p>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default Contact;
